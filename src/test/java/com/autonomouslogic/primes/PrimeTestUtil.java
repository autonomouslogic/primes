package com.autonomouslogic.primes;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.junit.jupiter.api.Test;

public class PrimeTestUtil {
	public static Stream<PrimeTestNumber> primeTestNumbers() {
		var last = PrimeList.PRIMES[PrimeList.PRIMES.length - 1];
		var list = Stream.concat(Stream.of(-1, 0, 1, 2), Stream.iterate(3, n -> n <= last, n -> n + 1))
				.map(n -> new PrimeTestNumber(n, Arrays.binarySearch(PrimeList.PRIMES, n) >= 0));
		var largePrimes = LARGE_PRIMES.stream().map(n -> new PrimeTestNumber(n, true));
		var largeNonPrimes = LARGE_NON_PRIMES.stream().map(n -> new PrimeTestNumber(n, false));
		return Stream.concat(list, Stream.concat(largePrimes, largeNonPrimes));
	}

	@Test
	void testPrimeTestNumbers() {
		var actual = primeTestNumbers()
				.filter(n -> n.isPrime)
				.map(n -> Long.toString(n.number))
				.collect(Collectors.joining("\n"));
		var expected = Stream.concat(Arrays.stream(PrimeList.PRIMES).boxed(), LARGE_PRIMES.stream())
				.map(String::valueOf)
				.collect(Collectors.joining("\n"));
		assertEquals(expected, actual);
	}

	public static class PrimeTestNumber {
		public final long number;
		public final boolean isPrime;

		public PrimeTestNumber(long number, boolean isPrime) {
			this.number = number;
			this.isPrime = isPrime;
		}

		@Override
		public String toString() {
			return "PrimeTestNumber{" + "number=" + number + ", isPrime=" + isPrime + '}';
		}
	}

	private static final List<Long> LARGE_PRIMES = List.of(
			2173586699L,
			3138023123L,
			8714866283L,
			11058802327L,
			25826609713L,
			30977102417L,
			39351586369L,
			44028578689L,
			49322202491L,
			51514631143L,
			57227594059L,
			72462752471L,
			81223358449L,
			88975583989L,
			109499415217L,
			111947126537L,
			113587499351L,
			153995828123L,
			165057335693L,
			182317631687L,
			223960189093L,
			244596664859L,
			262059001417L,
			267368293273L,
			271494639859L,
			272791380283L,
			281130744967L,
			282050035031L,
			298054348507L,
			306363888101L,
			306809320931L,
			306838276343L,
			332924306441L,
			335122804969L,
			336857463721L,
			337224711169L,
			338586515171L,
			343182913753L,
			364370252921L,
			366876610039L,
			367655930099L,
			380809777109L,
			394079976203L,
			401406827539L,
			407903656813L,
			409815809419L,
			413463314969L,
			423508759103L,
			430935221263L,
			431886239621L,
			436106842867L,
			438475170149L,
			469391372773L,
			471193712947L,
			538722073163L,
			551171342329L,
			558405474197L,
			580721065187L,
			582802065683L,
			599592408167L,
			601473348719L,
			612668317223L,
			615942785699L,
			619532959537L,
			634999756519L,
			665264557421L,
			669291069217L,
			684343379947L,
			688879529419L,
			689781471859L,
			691510747303L,
			706020823177L,
			722542828027L,
			733208356801L,
			733524701219L,
			774301034189L,
			779635858861L,
			781913245537L,
			787143660161L,
			826589069087L,
			836898869221L,
			853207985737L,
			862504145039L,
			865984096889L,
			893787142907L,
			916265125093L,
			933947575943L,
			934228024843L,
			936680880581L,
			963679626937L,
			965106546323L,
			970441332163L,
			971168112583L,
			983778128789L,
			984205658801L,
			984634636927L,
			988631090129L,
			993535822427L,
			994013353409L,
			994713696499L);

	private static final List<Long> LARGE_NON_PRIMES = List.of(
			6982125479L,
			18623105135L,
			19217060675L,
			21151396243L,
			22686561677L,
			56995802497L,
			89581394139L,
			120722688749L,
			126032018899L,
			126116012545L,
			141970692357L,
			151021291581L,
			166979794305L,
			168830201511L,
			170049086701L,
			171090427693L,
			180771754113L,
			190740811157L,
			204765863955L,
			210502633137L,
			218440481079L,
			221764534191L,
			228296486111L,
			248995787007L,
			276465568075L,
			281708738949L,
			316091734711L,
			317332975685L,
			318566775565L,
			330621483137L,
			346803773843L,
			352989372933L,
			353034491593L,
			355816273783L,
			377385453559L,
			398648799153L,
			425835865585L,
			428130510853L,
			437113524651L,
			439407138465L,
			446087496039L,
			451922350487L,
			455112892087L,
			456305765433L,
			473895549661L,
			480470619749L,
			490405530303L,
			491023826517L,
			497475599923L,
			504361681495L,
			523439356757L,
			534923357533L,
			541077132591L,
			544108904469L,
			566090269205L,
			566881258435L,
			581988657529L,
			594020386731L,
			602251903157L,
			604334594051L,
			612077481279L,
			626502381223L,
			635611095025L,
			645244780493L,
			656559983053L,
			658246613663L,
			663229114331L,
			666439349075L,
			666957894405L,
			669032001375L,
			684268468897L,
			689416850143L,
			692598754439L,
			707889110987L,
			711983199997L,
			713099833305L,
			717278034947L,
			727212406229L,
			734822584883L,
			741369626611L,
			762979509269L,
			770299300971L,
			788543310883L,
			793153706149L,
			816400820325L,
			827023098857L,
			830278153225L,
			854413881469L,
			859615157909L,
			865346456853L,
			881543206079L,
			886865215055L,
			888119678785L,
			888789592265L,
			894699959771L,
			915236833031L,
			922180995217L,
			946503978211L,
			968541743835L,
			991464895541L);
}
