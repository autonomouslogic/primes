package com.autonomouslogic.primes;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.junit.jupiter.api.Test;

public class PrimeTestUtil {
	public static Stream<PrimeTestNumber> primeTestNumbers() {
		var last = PrimeList.PRIMES[PrimeList.PRIMES.length - 1];
		var list = Stream.concat(Stream.of(-1, 0, 1, 2), Stream.iterate(3, n -> n <= last, n -> n + 1))
				.map(n -> new PrimeTestNumber(n, Arrays.binarySearch(PrimeList.PRIMES, n) >= 0));
		var largePrimes = LARGE_PRIMES.stream().map(n -> new PrimeTestNumber(n, true));
		var largeNonPrimes = LARGE_NON_PRIMES.stream().map(n -> new PrimeTestNumber(n, false));
		return Stream.concat(list, Stream.concat(largePrimes, largeNonPrimes));
	}

	@Test
	void testPrimeTestNumbers() {
		var actual = primeTestNumbers()
				.filter(n -> n.isPrime)
				.map(n -> Long.toString(n.number))
				.collect(Collectors.joining("\n"));
		var expected = Stream.concat(Arrays.stream(PrimeList.PRIMES).boxed(), LARGE_PRIMES.stream())
				.map(String::valueOf)
				.collect(Collectors.joining("\n"));
		assertEquals(expected, actual);
	}

	public static class PrimeTestNumber {
		public final long number;
		public final boolean isPrime;

		public PrimeTestNumber(long number, boolean isPrime) {
			this.number = number;
			this.isPrime = isPrime;
		}

		@Override
		public String toString() {
			return "PrimeTestNumber{" + "number=" + number + ", isPrime=" + isPrime + '}';
		}
	}

	private static final List<Long> LARGE_PRIMES = List.of(
			2173586699L,
			3138023123L,
			8714866283L,
			11058802327L,
			25826609713L,
			30977102417L,
			39351586369L,
			44028578689L,
			49322202491L,
			51514631143L,
			57227594059L,
			72462752471L,
			81223358449L,
			88975583989L,
			109499415217L,
			111947126537L,
			113587499351L,
			153995828123L,
			165057335693L,
			182317631687L,
			223960189093L,
			244596664859L,
			262059001417L,
			267368293273L,
			271494639859L,
			272791380283L,
			281130744967L,
			282050035031L,
			298054348507L,
			306363888101L,
			306809320931L,
			306838276343L,
			332924306441L,
			335122804969L,
			336857463721L,
			337224711169L,
			338586515171L,
			343182913753L,
			364370252921L,
			366876610039L,
			367655930099L,
			380809777109L,
			394079976203L,
			401406827539L,
			407903656813L,
			409815809419L,
			413463314969L,
			423508759103L,
			430935221263L,
			431886239621L,
			436106842867L,
			438475170149L,
			469391372773L,
			471193712947L,
			538722073163L,
			551171342329L,
			558405474197L,
			580721065187L,
			582802065683L,
			599592408167L,
			601473348719L,
			612668317223L,
			615942785699L,
			619532959537L,
			634999756519L,
			665264557421L,
			669291069217L,
			684343379947L,
			688879529419L,
			689781471859L,
			691510747303L,
			706020823177L,
			722542828027L,
			733208356801L,
			733524701219L,
			774301034189L,
			779635858861L,
			781913245537L,
			787143660161L,
			826589069087L,
			836898869221L,
			853207985737L,
			862504145039L,
			865984096889L,
			893787142907L,
			916265125093L,
			933947575943L,
			934228024843L,
			936680880581L,
			963679626937L,
			965106546323L,
			970441332163L,
			971168112583L,
			983778128789L,
			984205658801L,
			984634636927L,
			988631090129L,
			993535822427L,
			994013353409L,
			994713696499L);

	private static final List<Long> LARGE_NON_PRIMES = List.of(
			19402353993L,
			25683737987L,
			34574296186L,
			67714609327L,
			69021481956L,
			91333635896L,
			101233963018L,
			104525838952L,
			106389604635L,
			114770483311L,
			121102845047L,
			125902838350L,
			126675608007L,
			127713286058L,
			131158705000L,
			141897693696L,
			142259410335L,
			170094854497L,
			171355706619L,
			178298642760L,
			195658306901L,
			203132637019L,
			226307632479L,
			232863225711L,
			240399647996L,
			242224474882L,
			243689058501L,
			246859084791L,
			250686165862L,
			266050678056L,
			288019658850L,
			291154664865L,
			293674521154L,
			294440603044L,
			303118389384L,
			318444926421L,
			318467543954L,
			334187855643L,
			352346813984L,
			391751437216L,
			394292000711L,
			403842514361L,
			409526260266L,
			412684119542L,
			415255602359L,
			421167767229L,
			425555851609L,
			434813007958L,
			447809651301L,
			458050574986L,
			461601442400L,
			466772214244L,
			478360016525L,
			479312441870L,
			511862687511L,
			520159902258L,
			526908014991L,
			529802113555L,
			541413692372L,
			547006911418L,
			554732371273L,
			557155488844L,
			566481834993L,
			574515933621L,
			583712655758L,
			593297347497L,
			599985097155L,
			615165133620L,
			623496123328L,
			627531491161L,
			645245378408L,
			660128254710L,
			674041508372L,
			675901752461L,
			685221143322L,
			685828829677L,
			701525489610L,
			702258716051L,
			711516606296L,
			722272340486L,
			739596893887L,
			742927823717L,
			744971529203L,
			773737008336L,
			776934678662L,
			781509075678L,
			783682808392L,
			784364761675L,
			816128876171L,
			841118519776L,
			845927848882L,
			854736726734L,
			884799691632L,
			933207383720L,
			939498139930L,
			954439767454L,
			966902442394L,
			972746807677L,
			973444314057L,
			998785382416L);
}
